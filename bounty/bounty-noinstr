#!/bin/bash
# tool

TOOL_NAME=BOUNTY
FIND_OPTIONS=""


printversion() { echo "1.1.2" 1>&2; }


# function to run the tool

run()
{
  if [ "$PROP" = "termination" ] ; then
    PROPERTY="$PROPERTY --no-assertions --no-self-loops-to-assumptions"
  else
    echo "UNSUPPORTED PROPERTY"
    exit 6
  fi

  # Copy source file to tmp dir, and cd there
  
  cp  "${BM[@]}" $BM_DIR/$FILE_NAME
  cd  $BM_DIR
  #echo CURRENT DIR is $PWD

  # Run bracer
  #bracer -in $FILE_NAME -c

  # Run instrumenter
  #grep -ql "brace_it called" OutFile.txt
  #if [ $? -eq 0 ] 
  #then
     # TODO : instead of using *braced.c, compute the actual instrumented file name
     #instrumenter -in *braced.c -c
  #else
     #instrumenter -in $FILE_NAME -c
  #fi

  # if file got instrumented, do NT check on instrumented file
  NTFILE=""
  # TODO : instead of using *_instrumented.c, compute the actual instrumented file name
  ls *_instrumented.c
  if [ $? -eq 0 ]
  then
     NTFILE="`ls *_instrumented.c`"
  else
     NTFILE="$FILE_NAME"
  fi

  echo NTFILE is $NTFILE
  #  OLD run-nt-gl-and-z3.sh $NTFILE $FILE_NAME
  run-one-bounty.sh $NTFILE $FILE_NAME
  EC=$?
  cd $TOOL_DIR
  #echo CURRENT DIR is $PWD
}

# main tool wrapper script
# run "make <tool>-wrapper" to generate the wrapper script

# map properties to tool options

declare -A OPTIONS
OPTIONS["label"]="--error-label"
OPTIONS["unreach_call"]=""
OPTIONS["termination"]=""
OPTIONS["overflow"]="--signed-overflow-check --no-assertions"
OPTIONS["memsafety"]="--pointer-check --memory-leak-check --bounds-check --no-assertions"
OPTIONS["memcleanup"]="--pointer-check --memory-leak-check --memory-cleanup-check --bounds-check --no-assertions"

parse_property_file()
{
  local fn=$1

  cat $fn | sed 's/[[:space:]]//g' | perl -n -e '
if(/^CHECK\(init\((\S+)\(\)\),LTL\((\S+)\)\)$/) {
  print "ENTRY=$1\n";
  print "PROP=\"label\"\nLABEL=\"$1\"\n" if($2 =~ /^G!label\((\S+)\)$/);
  if($2 =~ /^G!call\((?<fn>\S+)\(\)\)$/) {
    print "PROP=\"unreach_call\"\n";
    print "FAIL_FUNCTION=\"$+{fn}\"\n";
  }
  print "PROP=\"unreach_call\"\n" if($2 =~ /^Gassert$/);
  print "PROP=\"memsafety\"\n" if($2 =~ /^Gvalid-(free|deref|memtrack)$/);
  print "PROP=\"memcleanup\"\n" if($2 =~ /^Gvalid-memcleanup$/);
  print "PROP=\"overflow\"\n" if($2 =~ /^G!overflow$/);
  print "PROP=\"termination\"\n" if($2 =~ /^Fend$/);
}'
}


export VERSION="1.1.0"

OBJ_BITS="16"
BIT_WIDTH="64"
declare -a BM
BM=()
PROP_FILE=""
WITNESS_FILE=""

while [ -n "$1" ] ; do
  case "$1" in
    --32|--64|32|64) BIT_WIDTH="${1##--}" ; shift 1 ;;
    --propertyfile|--propertyFile) PROP_FILE="$2" ; shift 2 ;;
    --graphml-witness) export WITNESS_FILE="$2" ; shift 2 ;;
    --version) printversion ; exit 0 ;;
    *) SRC=(`eval "find $1 $FIND_OPTIONS"`) ; BM=("${BM[@]}" "${SRC[@]}") ; shift 1 ;;
  esac
done

if [ -z "${BM[0]}" ] || [ -z "$PROP_FILE" ] ; then
  echo "BM=${BM[0]}" "PROP=$PROP_FILE" 
  echo "Missing benchmark or property file"
  exit 1
fi

if [ ! -s "${BM[0]}" ] || [ ! -s "$PROP_FILE" ] ; then
  echo "Empty benchmark or property file"
  exit 1
fi

eval `parse_property_file $PROP_FILE`

if [[ "$PROP" == "" ]]; then
  echo "UNRECOGNIZED PROPERTY SPECIFICATION"
  exit 1
elif [[ "$PROP" == "label" ]]; then
  PROPERTY="${OPTIONS[$PROP]} $LABEL"
else
  PROPERTY=${OPTIONS[$PROP]}
fi

export ENTRY
export PROPERTY
export BIT_WIDTH
export BM
export PROP
export OBJ_BITS
export FILE_NAME
export TOOL_DIR

export TOOL_DIR=$PWD
echo TOOL_DIR is $TOOL_DIR
export PATH=$TOOL_DIR:$PATH

export FILE_NAME="`basename ${BM[0]}`"
#echo  FILE_NAME is "<"$FILE_NAME">"

export GMON_OUT_PREFIX=`basename ${BM[0]}`.gmon.out
#echo "GMON_OUT_PREFIX $GMON_OUT_PREFIX"

export BM_DIR=`mktemp -d -t ${TOOL_NAME}-benchmark.XXXXXX`
echo "BM_DIR = $BM_DIR"

export LOG=`mktemp -t ${TOOL_NAME}-log.XXXXXX`
trap "rm -rf $LOG $LOG.latest $LOG.ok $LOG.witness $LOG.bin $BM_DIR" EXIT

run

case $EC in
  0)
     EC=0
     echo "UNKNOWN"
     ;;
  1)
     EC=0
     echo "FALSE(termination)"
     ;;
  2)
     EC=10
     echo "UNKNOWN"
     ;;
  3)
     EC=10
     echo "INCONCLUSIVE"
     ;;
  124)
     EC=10
     echo "OUT OF TIME"
     ;;
  137)
     EC=10
     echo "OUT OF MEMORY"
     ;;
  *)
     EC=10
     echo "INTERNAL-ERROR"
     ;;
esac
exit $EC
