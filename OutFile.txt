
Found Input File To Parse on disk = input/display-bit.c
Output File = OutFile.txt

Function name is displayBits
VisitVarDecl :: Found VarDecl at line = 14
VisitVarDecl :: Found VarDecl at line = 15
VisitVarDecl :: VarDecl is Global and not extern
VisitVarDecl :: VarDecl Name : number1 	VisitVarDecl :: VarDecl Type : unsigned int	VisitVarDecl :: VarDecl Line Number : 15
VisitVarDecl :: Found VarDecl at line = 16
VisitVarDecl :: VarDecl is Global and not extern
VisitVarDecl :: VarDecl Name : mask 	VisitVarDecl :: VarDecl Type : int	VisitVarDecl :: VarDecl Line Number : 16
VisitVarDecl :: Found VarDecl at line = 17
VisitVarDecl :: VarDecl is Global and not extern
VisitVarDecl :: VarDecl Name : x 	VisitVarDecl :: VarDecl Type : unsigned int	VisitVarDecl :: VarDecl Line Number : 17
VisitVarDecl :: Found VarDecl at line = 18
VisitVarDecl :: VarDecl is Global and not extern
VisitVarDecl :: VarDecl Name : c 	VisitVarDecl :: VarDecl Type : int	VisitVarDecl :: VarDecl Line Number : 18
VisitVarDecl :: Found VarDecl at line = 19
VisitVarDecl :: VarDecl is Global and not extern
VisitVarDecl :: VarDecl Name : y 	VisitVarDecl :: VarDecl Type : int	VisitVarDecl :: VarDecl Line Number : 19
Function name is main
Function body begins at line number = 20
Function body ends at line number = 29
Number of function arguments = 0
VisitCompoundStmt :: CompoundStmt at line 20 and column 16 to line 29 and column 1
VisitCompoundStmt :: Substmt is CallExpr at line 24
VisitCompoundStmt :: Substmt is CallExpr at line 25
VisitCompoundStmt :: Substmt is CallExpr at line 26
VisitCompoundStmt :: Substmt is BinaryOperator at line 27
VisitCompoundStmt :: Substmt is ReturnStmt at line 28
show_scope_map :: Printing scope map
c => c 0 0
mask => mask 0 0
number1 => number1 0 0
x => x 0 0
y => y 0 0
Function name is displayBits
Function body begins at line number = 31
Function body ends at line number = 46
Number of function arguments = 1
Argument 0 name = value
Argument 0 type = unsigned int
VisitVarDecl :: Found VarDecl at line = 31
VisitCompoundStmt :: CompoundStmt at line 31 and column 38 to line 46 and column 1
VisitCompoundStmt :: Substmt is DeclStmt at line 32
VisitCompoundStmt :: Variable (SingleDecl) displayMask of type unsigned int declared at line 32 and column 3
VisitCompoundStmt :: Substmt is CallExpr at line 33
VisitCompoundStmt :: Substmt is WhileStmt at line 35
VisitCompoundStmt :: Substmt is CallExpr at line 44
show_scope_map :: Printing scope map
c => c 0 0
displayMask => displayMask 32 46
mask => mask 0 0
number1 => number1 0 0
value => value 31 46
x => x 0 0
y => y 0 0
VisitVarDecl :: Found VarDecl at line = 32
VisitStmt :: While Statement Found
getArrayUseInLoop :: Stmt Body of CompoundStmt
getArrayUseInLoop :: Stmt at line 36 is CallExpr
getArrayUseInLoop :: Stmt at line 37 is CompoundAssignOperator
getArrayUseInLoop :: Stmt at line 38 is IfStmt
getArrayUseInLoop :: Stmt at line 41 is BinaryOperator
getArrayUseInLoop :: LHS at 41 is DeclRefExpr
getArrayUseInLoop :: RHS at 41 is BinaryOperator
hasArrayAccessInExpression :: BinaryOperator at line 41
getArrayUseInLoop :: Stmt at line 42 is BinaryOperator
getArrayUseInLoop :: LHS at 42 is DeclRefExpr
getArrayUseInLoop :: RHS at 42 is BinaryOperator
hasArrayAccessInExpression :: BinaryOperator at line 42
Instrumentation flag = 2
check_variable_scope :: Checking scope of variable c at print line number : 35
 <<< check_variable_scope :: Variable c is in scope at print line number : 35 | scope begin = 0 | scope end = 0 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable displayMask at print line number : 35
 <<< check_variable_scope :: Variable displayMask is in scope at print line number : 35 | scope begin = 32 | scope end = 46 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable mask at print line number : 35
 <<< check_variable_scope :: Variable mask is in scope at print line number : 35 | scope begin = 0 | scope end = 0 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable number1 at print line number : 35
 <<< check_variable_scope :: Variable number1 is in scope at print line number : 35 | scope begin = 0 | scope end = 0 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable value at print line number : 35
 <<< check_variable_scope :: Variable value is in scope at print line number : 35 | scope begin = 31 | scope end = 46 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable x at print line number : 35
 <<< check_variable_scope :: Variable x is in scope at print line number : 35 | scope begin = 0 | scope end = 0 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable y at print line number : 35
 <<< check_variable_scope :: Variable y is in scope at print line number : 35 | scope begin = 0 | scope end = 0 >>> 
check_alloca_map :: Printing alloca map
Begin inscope_var_pairs :: Printing CBMC scope map
c => int
displayMask => unsigned int
mask => int
number1 => unsigned int
value => unsigned int
x => unsigned int
y => int
End inscope_var_pairs :: Printing CBMC scope map
eqStrAnd = oc==c && 
eqStrAnd = oc==c && odisplayMask==displayMask && 
eqStrAnd = oc==c && odisplayMask==displayMask && omask==mask && 
eqStrAnd = oc==c && odisplayMask==displayMask && omask==mask && onumber1==number1 && 
eqStrAnd = oc==c && odisplayMask==displayMask && omask==mask && onumber1==number1 && ovalue==value && 
eqStrAnd = oc==c && odisplayMask==displayMask && omask==mask && onumber1==number1 && ovalue==value && ox==x && 
eqStrAnd = oc==c && odisplayMask==displayMask && omask==mask && onumber1==number1 && ovalue==value && ox==x && oy==y
VisitCompoundStmt :: CompoundStmt at line 35 and column 17 to line 43 and column 3
VisitCompoundStmt :: Substmt is CallExpr at line 36
VisitCompoundStmt :: Substmt is CompoundAssignOperator at line 37
VisitCompoundStmt :: Substmt is IfStmt at line 38
VisitCompoundStmt :: Substmt is BinaryOperator at line 41
VisitCompoundStmt :: Substmt is BinaryOperator at line 42
show_scope_map :: Printing scope map
c => c 0 0
displayMask => displayMask 32 46
mask => mask 0 0
number1 => number1 0 0
value => value 31 46
x => x 0 0
y => y 0 0
VisitCompoundStmt :: CompoundStmt at line 38 and column 21 to line 40 and column 5
VisitCompoundStmt :: Substmt is CallExpr at line 39
show_scope_map :: Printing scope map
c => c 0 0
displayMask => displayMask 32 46
mask => mask 0 0
number1 => number1 0 0
value => value 31 46
x => x 0 0
y => y 0 0

Finished call to function ParseAST   

Finished Rewriting   
