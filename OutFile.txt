
Found Input File To Parse on disk = input/test1.c
Output File = OutFile.txt

Function name is __VERIFIER_nondet_int
Function name is main
Function body begins at line number = 12
Function body ends at line number = 50
Number of function arguments = 0
VisitCompoundStmt :: CompoundStmt at line 12 and column 1 to line 50 and column 1
VisitCompoundStmt :: Substmt is DeclStmt at line 14
Pointer type is char * :: Variable name is pc
VisitCompoundStmt :: Variable (SingleDecl) pc of type char * declared at line 14 and column 5
VisitCompoundStmt :: Substmt is DeclStmt at line 15
VisitCompoundStmt :: Variable (SingleDecl) x of type int declared at line 15 and column 5
VisitCompoundStmt :: Substmt is DeclStmt at line 16
VisitCompoundStmt :: Variable (SingleDecl) y of type int declared at line 16 and column 5
VisitCompoundStmt :: Substmt is DeclStmt at line 17
VisitCompoundStmt :: Variable (SingleDecl) array of type float[10] declared at line 17 and column 5
VisitCompoundStmt :: Substmt is DeclStmt at line 18
VisitCompoundStmt :: Variable (SingleDecl) arrayindex of type int declared at line 18 and column 5
VisitCompoundStmt :: Substmt is BinaryOperator at line 19
VisitCompoundStmt :: Substmt is BinaryOperator at line 20
VisitCompoundStmt :: Substmt is IfStmt at line 22
VisitCompoundStmt :: Substmt is ForStmt at line 33
VisitCompoundStmt :: Substmt is WhileStmt at line 38
VisitCompoundStmt :: Substmt is WhileStmt at line 43
VisitCompoundStmt :: Substmt is ReturnStmt at line 49
show_scope_map :: Printing scope map
array => array 17 50
arrayindex => arrayindex 18 50
pc => pc 14 50
x => x 15 50
y => y 16 50
VisitVarDecl :: Found VarDecl at line = 14
VisitVarDecl :: Found VarDecl at line = 15
VisitVarDecl :: Found VarDecl at line = 16
VisitVarDecl :: Found VarDecl at line = 17
VisitVarDecl :: Found VarDecl at line = 18
VisitCompoundStmt :: CompoundStmt at line 22 and column 14 to line 31 and column 2
VisitCompoundStmt :: Substmt is ForStmt at line 23
VisitCompoundStmt :: Substmt is WhileStmt at line 27
show_scope_map :: Printing scope map
array => array 17 50
arrayindex => arrayindex 18 50
pc => pc 14 50
x => x 15 50
y => y 16 50
VisitStmt :: For Statement Found
Decl is Var
VisitForStmt :: Variable (Not SingleDecl) loopi of type int declared at line 23 and column 7
Decl is Var
VisitForStmt :: Variable (Not SingleDecl) loopj of type int declared at line 23 and column 7
VisitForStmt :: Decl Stmt found in Init and added to scope_map
Added variable in For Stmt to scope map if it exists and Returned from getDeclInForStmt()
getArrayUseInLoop :: Stmt Body of CompoundStmt
getArrayUseInLoop :: Stmt at line 24 is BinaryOperator
getArrayUseInLoop :: LHS at 24 is DeclRefExpr
getArrayUseInLoop :: RHS at 24 is ImplicitCastExpr
hasArrayAccessInExpression :: Expression is ImplicitCastExpr at line 24
Instrumentation flag = 2
check_variable_scope :: Checking scope of variable array at print line number : 23
 <<< check_variable_scope :: Variable array is in scope at print line number : 23 | scope begin = 17 | scope end = 50 >>> 
check_variable_scope :: Checking scope of variable arrayindex at print line number : 23
 <<< check_variable_scope :: Variable arrayindex is in scope at print line number : 23 | scope begin = 18 | scope end = 50 >>> 
check_variable_scope :: Checking scope of variable loopi at print line number : 23
 <<< check_variable_scope :: Variable loopi is in scope at print line number : 23 | scope begin = 23 | scope end = 25 >>> 
check_variable_scope :: Checking scope of variable loopj at print line number : 23
 <<< check_variable_scope :: Variable loopj is in scope at print line number : 23 | scope begin = 23 | scope end = 25 >>> 
check_variable_scope :: Checking scope of variable pc at print line number : 23
 <<< check_variable_scope :: Variable pc is in scope at print line number : 23 | scope begin = 14 | scope end = 50 >>> 
check_variable_scope :: Checking scope of variable x at print line number : 23
 <<< check_variable_scope :: Variable x is in scope at print line number : 23 | scope begin = 15 | scope end = 50 >>> 
check_variable_scope :: Checking scope of variable y at print line number : 23
 <<< check_variable_scope :: Variable y is in scope at print line number : 23 | scope begin = 16 | scope end = 50 >>> 
Begin inscope_var_pairs :: Printing CBMC scope map
arrayindex => int
loopi => int
loopj => int
pc => char *
x => int
y => int
End inscope_var_pairs :: Printing CBMC scope map
eqStrAnd = oarrayindex==arrayindex && 
eqStrAnd = oarrayindex==arrayindex && oloopi==loopi && 
eqStrAnd = oarrayindex==arrayindex && oloopi==loopi && oloopj==loopj && 
eqStrAnd = oarrayindex==arrayindex && oloopi==loopi && oloopj==loopj && opc==pc && 
eqStrAnd = oarrayindex==arrayindex && oloopi==loopi && oloopj==loopj && opc==pc && ox==x && 
eqStrAnd = oarrayindex==arrayindex && oloopi==loopi && oloopj==loopj && opc==pc && ox==x && oy==y
VisitVarDecl :: Found VarDecl at line = 23
VisitVarDecl :: Found VarDecl at line = 23
VisitCompoundStmt :: CompoundStmt at line 23 and column 41 to line 25 and column 3
VisitCompoundStmt :: Substmt is BinaryOperator at line 24
show_scope_map :: Printing scope map
array => array 17 50
arrayindex => arrayindex 18 50
loopi => loopi 23 25
loopj => loopj 23 25
pc => pc 14 50
x => x 15 50
y => y 16 50
VisitStmt :: While Statement Found
getArrayUseInLoop :: Stmt Body of CompoundStmt
getArrayUseInLoop :: Stmt at line 28 is BinaryOperator
getArrayUseInLoop :: LHS at 28 is DeclRefExpr
getArrayUseInLoop :: RHS at 28 is BinaryOperator
hasArrayAccessInExpression :: Expression is BinaryOperator at line 28
hasArrayAccessInExpression :: Expression is ImplicitCastExpr at line 28
hasArrayAccessInExpression :: Expression is ImplicitCastExpr at line 28
getArrayUseInLoop :: Stmt at line 29 is BinaryOperator
getArrayUseInLoop :: LHS at 29 is ArraySubscriptExpr
getArrayUseInLoop :: RHS at 29 is ImplicitCastExpr
hasArrayAccessInExpression :: Expression is ImplicitCastExpr at line 29
lhs is ArraySubscriptExpr
getArrayUseInLoop :: ArraySubscriptExpr at line 29
VisitCompoundStmt :: CompoundStmt at line 27 and column 21 to line 30 and column 6
VisitCompoundStmt :: Substmt is BinaryOperator at line 28
VisitCompoundStmt :: Substmt is BinaryOperator at line 29
show_scope_map :: Printing scope map
array => array 17 50
arrayindex => arrayindex 18 50
loopi => loopi 23 25
loopj => loopj 23 25
pc => pc 14 50
x => x 15 50
y => y 16 50
VisitStmt :: For Statement Found
Decl is Var
VisitForStmt :: Variable (Not SingleDecl) loopi of type int declared at line 33 and column 7
Decl is Var
VisitForStmt :: Variable (Not SingleDecl) loopj of type int declared at line 33 and column 7
VisitForStmt :: Decl Stmt found in Init and added to scope_map
Added variable in For Stmt to scope map if it exists and Returned from getDeclInForStmt()
getArrayUseInLoop :: Stmt Body of CompoundStmt
getArrayUseInLoop :: Stmt at line 34 is BinaryOperator
getArrayUseInLoop :: LHS at 34 is DeclRefExpr
getArrayUseInLoop :: RHS at 34 is ImplicitCastExpr
hasArrayAccessInExpression :: Expression is ImplicitCastExpr at line 34
getArrayUseInLoop :: Stmt at line 35 is BinaryOperator
getArrayUseInLoop :: LHS at 35 is ArraySubscriptExpr
getArrayUseInLoop :: RHS at 35 is ImplicitCastExpr
hasArrayAccessInExpression :: Expression is ImplicitCastExpr at line 35
lhs is ArraySubscriptExpr
getArrayUseInLoop :: ArraySubscriptExpr at line 35
VisitVarDecl :: Found VarDecl at line = 33
VisitVarDecl :: Found VarDecl at line = 33
VisitCompoundStmt :: CompoundStmt at line 33 and column 41 to line 36 and column 3
VisitCompoundStmt :: Substmt is BinaryOperator at line 34
VisitCompoundStmt :: Substmt is BinaryOperator at line 35
show_scope_map :: Printing scope map
array => array 17 50
arrayindex => arrayindex 18 50
loopi => loopi 23 25
loopi => loopi 33 36
loopj => loopj 23 25
loopj => loopj 33 36
pc => pc 14 50
x => x 15 50
y => y 16 50
VisitStmt :: While Statement Found
getArrayUseInLoop :: Stmt Body of CompoundStmt
getArrayUseInLoop :: Stmt at line 39 is BinaryOperator
getArrayUseInLoop :: LHS at 39 is DeclRefExpr
getArrayUseInLoop :: RHS at 39 is BinaryOperator
hasArrayAccessInExpression :: Expression is BinaryOperator at line 39
hasArrayAccessInExpression :: Expression is ImplicitCastExpr at line 39
hasArrayAccessInExpression :: Expression is ImplicitCastExpr at line 39
Instrumentation flag = 2
check_variable_scope :: Checking scope of variable array at print line number : 38
 <<< check_variable_scope :: Variable array is in scope at print line number : 38 | scope begin = 17 | scope end = 50 >>> 
check_variable_scope :: Checking scope of variable arrayindex at print line number : 38
 <<< check_variable_scope :: Variable arrayindex is in scope at print line number : 38 | scope begin = 18 | scope end = 50 >>> 
check_variable_scope :: Checking scope of variable loopi at print line number : 38
 <<< check_variable_scope :: Variable loopi is not in scope at line number : 38>>> 
 check_variable_scope :: Checking scope of variable loopj at print line number : 38
 <<< check_variable_scope :: Variable loopj is not in scope at line number : 38>>> 
 check_variable_scope :: Checking scope of variable pc at print line number : 38
 <<< check_variable_scope :: Variable pc is in scope at print line number : 38 | scope begin = 14 | scope end = 50 >>> 
check_variable_scope :: Checking scope of variable x at print line number : 38
 <<< check_variable_scope :: Variable x is in scope at print line number : 38 | scope begin = 15 | scope end = 50 >>> 
check_variable_scope :: Checking scope of variable y at print line number : 38
 <<< check_variable_scope :: Variable y is in scope at print line number : 38 | scope begin = 16 | scope end = 50 >>> 
Begin inscope_var_pairs :: Printing CBMC scope map
arrayindex => int
pc => char *
x => int
y => int
End inscope_var_pairs :: Printing CBMC scope map
eqStrAnd = oarrayindex==arrayindex && 
eqStrAnd = oarrayindex==arrayindex && opc==pc && 
eqStrAnd = oarrayindex==arrayindex && opc==pc && ox==x && 
eqStrAnd = oarrayindex==arrayindex && opc==pc && ox==x && oy==y
VisitCompoundStmt :: CompoundStmt at line 38 and column 21 to line 40 and column 2
VisitCompoundStmt :: Substmt is BinaryOperator at line 39
show_scope_map :: Printing scope map
array => array 17 50
arrayindex => arrayindex 18 50
loopi => loopi 23 25
loopi => loopi 33 36
loopj => loopj 23 25
loopj => loopj 33 36
pc => pc 14 50
x => x 15 50
y => y 16 50
VisitStmt :: While Statement Found
getArrayUseInLoop :: Stmt Body of CompoundStmt
getArrayUseInLoop :: Stmt at line 44 is BinaryOperator
getArrayUseInLoop :: LHS at 44 is DeclRefExpr
getArrayUseInLoop :: RHS at 44 is BinaryOperator
hasArrayAccessInExpression :: Expression is BinaryOperator at line 44
hasArrayAccessInExpression :: Expression is ImplicitCastExpr at line 44
hasArrayAccessInExpression :: Expression is ImplicitCastExpr at line 44
getArrayUseInLoop :: Stmt at line 45 is BinaryOperator
getArrayUseInLoop :: LHS at 45 is ArraySubscriptExpr
getArrayUseInLoop :: RHS at 45 is ImplicitCastExpr
hasArrayAccessInExpression :: Expression is ImplicitCastExpr at line 45
ArraySubscriptExpr in rhs
getArrayUseInLoop :: hasArrayAccessInExpression:: ArraySubscriptExpr at line 45
VisitCompoundStmt :: CompoundStmt at line 43 and column 21 to line 47 and column 2
VisitCompoundStmt :: Substmt is BinaryOperator at line 44
VisitCompoundStmt :: Substmt is BinaryOperator at line 45
VisitCompoundStmt :: Substmt is BinaryOperator at line 46
show_scope_map :: Printing scope map
array => array 17 50
arrayindex => arrayindex 18 50
loopi => loopi 23 25
loopi => loopi 33 36
loopj => loopj 23 25
loopj => loopj 33 36
pc => pc 14 50
x => x 15 50
y => y 16 50
Function name is foo
Function body begins at line number = 54
Function body ends at line number = 70
Number of function arguments = 3
Argument 0 name = a
Argument 0 type = int
Argument 1 name = b
Argument 1 type = float
Argument 2 name = funcp
Argument 2 type = char *
VisitVarDecl :: Found VarDecl at line = 53
VisitVarDecl :: Found VarDecl at line = 53
VisitVarDecl :: Found VarDecl at line = 53
VisitCompoundStmt :: CompoundStmt at line 54 and column 1 to line 70 and column 1
VisitCompoundStmt :: Substmt is DeclStmt at line 55
Decl is Var
VisitCompoundStmt :: Variable (Not SingleDecl) h of type int declared at line 55 and column 1
Decl is Var
VisitCompoundStmt :: Variable (Not SingleDecl) m of type int declared at line 55 and column 1
VisitCompoundStmt :: Substmt is DeclStmt at line 56
VisitCompoundStmt :: Variable (SingleDecl) yy of type float declared at line 56 and column 1
VisitCompoundStmt :: Substmt is DeclStmt at line 57
VisitCompoundStmt :: Variable (SingleDecl) z of type int[10] declared at line 57 and column 1
VisitCompoundStmt :: Substmt is WhileStmt at line 58
VisitCompoundStmt :: Substmt is ReturnStmt at line 68
show_scope_map :: Printing scope map
a => a 54 70
array => array 17 50
arrayindex => arrayindex 18 50
b => b 54 70
funcp => funcp 54 70
h => h 55 70
loopi => loopi 23 25
loopi => loopi 33 36
loopj => loopj 23 25
loopj => loopj 33 36
m => m 55 70
pc => pc 14 50
x => x 15 50
y => y 16 50
yy => yy 56 70
z => z 57 70
VisitVarDecl :: Found VarDecl at line = 55
VisitVarDecl :: Found VarDecl at line = 55
VisitVarDecl :: Found VarDecl at line = 56
VisitVarDecl :: Found VarDecl at line = 57
VisitStmt :: While Statement Found
getArrayUseInLoop :: Stmt Body of CompoundStmt
getArrayUseInLoop :: Stmt at line 59 is BinaryOperator
getArrayUseInLoop :: LHS at 59 is DeclRefExpr
getArrayUseInLoop :: RHS at 59 is ImplicitCastExpr
hasArrayAccessInExpression :: Expression is ImplicitCastExpr at line 59
hasArrayAccessInExpression :: Expression is ImplicitCastExpr at line 59
hasArrayAccessInExpression :: Expression is ImplicitCastExpr at line 59
getArrayUseInLoop :: Stmt at line 63 is BinaryOperator
getArrayUseInLoop :: LHS at 63 is DeclRefExpr
getArrayUseInLoop :: RHS at 63 is ImplicitCastExpr
hasArrayAccessInExpression :: Expression is ImplicitCastExpr at line 63
hasArrayAccessInExpression :: Expression is ImplicitCastExpr at line 63
hasArrayAccessInExpression :: Expression is ImplicitCastExpr at line 63
ArraySubscriptExpr in rhs
getArrayUseInLoop :: hasArrayAccessInExpression:: ArraySubscriptExpr at line 63
VisitCompoundStmt :: CompoundStmt at line 58 and column 21 to line 66 and column 2
VisitCompoundStmt :: Substmt is BinaryOperator at line 59
VisitCompoundStmt :: Substmt is BinaryOperator at line 63
show_scope_map :: Printing scope map
a => a 54 70
array => array 17 50
arrayindex => arrayindex 18 50
b => b 54 70
funcp => funcp 54 70
h => h 55 70
loopi => loopi 23 25
loopi => loopi 33 36
loopj => loopj 23 25
loopj => loopj 33 36
m => m 55 70
pc => pc 14 50
x => x 15 50
y => y 16 50
yy => yy 56 70
z => z 57 70

Finished call to function ParseAST   

Finished Rewriting   
