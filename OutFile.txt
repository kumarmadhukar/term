
Found Input File To Parse on disk = test2_braced.c
Output File = OutFile.txt

Function name is main
Function body begins at line number = 3
Function body ends at line number = 44
Number of function arguments = 3
Argument 0 name = a
Argument 0 type = int
Argument 1 name = b
Argument 1 type = float
Argument 2 name = funcp
Argument 2 type = char *
VisitVarDecl :: Found VarDecl at line = 2
VisitVarDecl :: Found VarDecl at line = 2
VisitVarDecl :: Found VarDecl at line = 2
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt Begin line = 3 and column = 1
VisitCompoundStmt :: CompoundStmt End line = 44 and column = 1
Original body code is {
int h,m;
float yy;
	    while (a >= 0) {
	    	a = a - b;
	}

	{if (a>0)
		{h++;}

        else {if (a<0){
		h--;}
        else {if (a==0)
		{h=0;}
	else	{
		h=1;}}}}
		
	    





while (1)
        {h++;}

while (1)
	{
	{if (h>0)
		{h=h+1;}}
	h=h-1;	
}

for (h=0;h<10;h++)
	{h--;}
for (h=0;h<10;h++)
	{yy
=(float) yy;}

return a;


####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt at line 3 and column 1 to line 44 and column 1
VisitCompoundStmt :: Substmt is DeclStmt at line 4
Decl is Var
VisitCompoundStmt :: Variable (Not SingleDecl) h of type int declared at line 4 and column 1
Decl is Var
VisitCompoundStmt :: Variable (Not SingleDecl) m of type int declared at line 4 and column 1
VisitCompoundStmt :: Substmt is DeclStmt at line 5
VisitCompoundStmt :: Variable (SingleDecl) yy of type float declared at line 5 and column 1
VisitCompoundStmt :: Substmt is WhileStmt at line 6
VisitCompoundStmt :: Substmt is CompoundStmt at line 10
VisitCompoundStmt :: Substmt is WhileStmt at line 26
VisitCompoundStmt :: Substmt is WhileStmt at line 29
VisitCompoundStmt :: Substmt is ForStmt at line 36
VisitCompoundStmt :: Substmt is ForStmt at line 38
VisitCompoundStmt :: Substmt is ReturnStmt at line 42
show_scope_map :: Printing scope map
a => a 3 44 int
b => b 3 44 float
funcp => funcp 3 44 char *
h => h 4 44 int
m => m 4 44 int
yy => yy 5 44 float
VisitVarDecl :: Found VarDecl at line = 4
VisitVarDecl :: Found VarDecl at line = 4
VisitVarDecl :: Found VarDecl at line = 5
VisitStmt :: While Statement Found
getArrayUseInLoop :: Stmt Body of CompoundStmt
getArrayUseInLoop :: Stmt at line 7 is BinaryOperator
getArrayUseInLoop :: LHS at 7 is DeclRefExpr
getArrayUseInLoop :: RHS at 7 is ImplicitCastExpr
hasArrayAccessInExpression :: ImplicitCast :: BinaryOperator at line 7
LHS is ImplicitCastExpr RHS is ImplicitCastExpr
Instrumentation flag = 2
check_variable_scope :: Checking scope of variable a at print line number : 6
 <<< check_variable_scope :: Variable a is in scope at print line number : 6 | scope begin = 3 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable b at print line number : 6
 <<< check_variable_scope :: Variable b is in scope at print line number : 6 | scope begin = 3 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable funcp at print line number : 6
 <<< check_variable_scope :: Variable funcp is in scope at print line number : 6 | scope begin = 3 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable h at print line number : 6
 <<< check_variable_scope :: Variable h is in scope at print line number : 6 | scope begin = 4 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable m at print line number : 6
 <<< check_variable_scope :: Variable m is in scope at print line number : 6 | scope begin = 4 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable yy at print line number : 6
 <<< check_variable_scope :: Variable yy is in scope at print line number : 6 | scope begin = 5 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
Begin inscope_var_pairs :: Printing CBMC scope map
a => int
b => float
funcp => char *
h => int
m => int
yy => float
End inscope_var_pairs :: Printing CBMC scope map
eqStrAnd = oa==a && 
eqStrAnd = oa==a && ob==b && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && oh==h && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && oh==h && om==m && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && oh==h && om==m && oyy==yy
Instrumentation flag = 2
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt Begin line = 6 and column = 21
VisitCompoundStmt :: CompoundStmt End line = 8 and column = 2
Original body code is {
	    	a = a - b;
	
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt at line 6 and column 21 to line 8 and column 2
VisitCompoundStmt :: Substmt is BinaryOperator at line 7
show_scope_map :: Printing scope map
a => a 3 44 int
b => b 3 44 float
funcp => funcp 3 44 char *
h => h 4 44 int
m => m 4 44 int
yy => yy 5 44 float
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt Begin line = 10 and column = 2
VisitCompoundStmt :: CompoundStmt End line = 18 and column = 10
Original body code is {if (a>0)
		{h++;}

        else {if (a<0){
		h--;}
        else {if (a==0)
		{h=0;}
	else	{
		h=1;}}}
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt at line 10 and column 2 to line 18 and column 10
VisitCompoundStmt :: Substmt is IfStmt at line 10
show_scope_map :: Printing scope map
a => a 3 44 int
b => b 3 44 float
funcp => funcp 3 44 char *
h => h 4 44 int
m => m 4 44 int
yy => yy 5 44 float
VisitStmt :: If Statement Found at line 10
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt Begin line = 11 and column = 3
VisitCompoundStmt :: CompoundStmt End line = 11 and column = 8
Original body code is {h++;
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt at line 11 and column 3 to line 11 and column 8
VisitCompoundStmt :: Substmt is UnaryOperator at line 11
show_scope_map :: Printing scope map
a => a 3 44 int
b => b 3 44 float
funcp => funcp 3 44 char *
h => h 4 44 int
m => m 4 44 int
yy => yy 5 44 float
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt Begin line = 13 and column = 14
VisitCompoundStmt :: CompoundStmt End line = 18 and column = 9
Original body code is {if (a<0){
		h--;}
        else {if (a==0)
		{h=0;}
	else	{
		h=1;}}
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt at line 13 and column 14 to line 18 and column 9
VisitCompoundStmt :: Substmt is IfStmt at line 13
show_scope_map :: Printing scope map
a => a 3 44 int
b => b 3 44 float
funcp => funcp 3 44 char *
h => h 4 44 int
m => m 4 44 int
yy => yy 5 44 float
VisitStmt :: If Statement Found at line 13
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt Begin line = 13 and column = 23
VisitCompoundStmt :: CompoundStmt End line = 14 and column = 7
Original body code is {
		h--;
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt at line 13 and column 23 to line 14 and column 7
VisitCompoundStmt :: Substmt is UnaryOperator at line 14
show_scope_map :: Printing scope map
a => a 3 44 int
b => b 3 44 float
funcp => funcp 3 44 char *
h => h 4 44 int
m => m 4 44 int
yy => yy 5 44 float
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt Begin line = 15 and column = 14
VisitCompoundStmt :: CompoundStmt End line = 18 and column = 8
Original body code is {if (a==0)
		{h=0;}
	else	{
		h=1;}
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt at line 15 and column 14 to line 18 and column 8
VisitCompoundStmt :: Substmt is IfStmt at line 15
show_scope_map :: Printing scope map
a => a 3 44 int
b => b 3 44 float
funcp => funcp 3 44 char *
h => h 4 44 int
m => m 4 44 int
yy => yy 5 44 float
VisitStmt :: If Statement Found at line 15
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt Begin line = 16 and column = 3
VisitCompoundStmt :: CompoundStmt End line = 16 and column = 8
Original body code is {h=0;
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt at line 16 and column 3 to line 16 and column 8
VisitCompoundStmt :: Substmt is BinaryOperator at line 16
show_scope_map :: Printing scope map
a => a 3 44 int
b => b 3 44 float
funcp => funcp 3 44 char *
h => h 4 44 int
m => m 4 44 int
yy => yy 5 44 float
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt Begin line = 17 and column = 7
VisitCompoundStmt :: CompoundStmt End line = 18 and column = 7
Original body code is {
		h=1;
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt at line 17 and column 7 to line 18 and column 7
VisitCompoundStmt :: Substmt is BinaryOperator at line 18
show_scope_map :: Printing scope map
a => a 3 44 int
b => b 3 44 float
funcp => funcp 3 44 char *
h => h 4 44 int
m => m 4 44 int
yy => yy 5 44 float
VisitStmt :: While Statement Found
getArrayUseInLoop :: Stmt Body of CompoundStmt
getArrayUseInLoop :: Stmt at line 27 is UnaryOperator
getArrayUseInLoop :: UnaryOperator at line 27
Instrumentation flag = 2
check_variable_scope :: Checking scope of variable a at print line number : 27
 <<< check_variable_scope :: Variable a is in scope at print line number : 27 | scope begin = 3 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable b at print line number : 27
 <<< check_variable_scope :: Variable b is in scope at print line number : 27 | scope begin = 3 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable funcp at print line number : 27
 <<< check_variable_scope :: Variable funcp is in scope at print line number : 27 | scope begin = 3 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable h at print line number : 27
 <<< check_variable_scope :: Variable h is in scope at print line number : 27 | scope begin = 4 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable m at print line number : 27
 <<< check_variable_scope :: Variable m is in scope at print line number : 27 | scope begin = 4 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable yy at print line number : 27
 <<< check_variable_scope :: Variable yy is in scope at print line number : 27 | scope begin = 5 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
Begin inscope_var_pairs :: Printing CBMC scope map
a => int
b => float
funcp => char *
h => int
m => int
yy => float
End inscope_var_pairs :: Printing CBMC scope map
eqStrAnd = oa==a && 
eqStrAnd = oa==a && ob==b && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && oh==h && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && oh==h && om==m && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && oh==h && om==m && oyy==yy
Instrumentation flag = 2
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt Begin line = 27 and column = 9
VisitCompoundStmt :: CompoundStmt End line = 27 and column = 14
Original body code is {h++;
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt at line 27 and column 9 to line 27 and column 14
VisitCompoundStmt :: Substmt is UnaryOperator at line 27
show_scope_map :: Printing scope map
a => a 3 44 int
b => b 3 44 float
funcp => funcp 3 44 char *
h => h 4 44 int
m => m 4 44 int
yy => yy 5 44 float
VisitStmt :: While Statement Found
getArrayUseInLoop :: Stmt Body of CompoundStmt
getArrayUseInLoop :: Stmt at line 31 is CompoundStmt
getArrayUseInLoop :: Stmt at line 33 is BinaryOperator
getArrayUseInLoop :: LHS at 33 is DeclRefExpr
getArrayUseInLoop :: RHS at 33 is BinaryOperator
hasArrayAccessInExpression :: BinaryOperator at line 33
Instrumentation flag = 2
check_variable_scope :: Checking scope of variable a at print line number : 30
 <<< check_variable_scope :: Variable a is in scope at print line number : 30 | scope begin = 3 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable b at print line number : 30
 <<< check_variable_scope :: Variable b is in scope at print line number : 30 | scope begin = 3 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable funcp at print line number : 30
 <<< check_variable_scope :: Variable funcp is in scope at print line number : 30 | scope begin = 3 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable h at print line number : 30
 <<< check_variable_scope :: Variable h is in scope at print line number : 30 | scope begin = 4 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable m at print line number : 30
 <<< check_variable_scope :: Variable m is in scope at print line number : 30 | scope begin = 4 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable yy at print line number : 30
 <<< check_variable_scope :: Variable yy is in scope at print line number : 30 | scope begin = 5 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
Begin inscope_var_pairs :: Printing CBMC scope map
a => int
b => float
funcp => char *
h => int
m => int
yy => float
End inscope_var_pairs :: Printing CBMC scope map
eqStrAnd = oa==a && 
eqStrAnd = oa==a && ob==b && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && oh==h && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && oh==h && om==m && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && oh==h && om==m && oyy==yy
Instrumentation flag = 2
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt Begin line = 30 and column = 2
VisitCompoundStmt :: CompoundStmt End line = 34 and column = 1
Original body code is {
	{if (h>0)
		{h=h+1;}}
	h=h-1;	

####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt at line 30 and column 2 to line 34 and column 1
VisitCompoundStmt :: Substmt is CompoundStmt at line 31
VisitCompoundStmt :: Substmt is BinaryOperator at line 33
show_scope_map :: Printing scope map
a => a 3 44 int
b => b 3 44 float
funcp => funcp 3 44 char *
h => h 4 44 int
m => m 4 44 int
yy => yy 5 44 float
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt Begin line = 31 and column = 2
VisitCompoundStmt :: CompoundStmt End line = 32 and column = 11
Original body code is {if (h>0)
		{h=h+1;}
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt at line 31 and column 2 to line 32 and column 11
VisitCompoundStmt :: Substmt is IfStmt at line 31
show_scope_map :: Printing scope map
a => a 3 44 int
b => b 3 44 float
funcp => funcp 3 44 char *
h => h 4 44 int
m => m 4 44 int
yy => yy 5 44 float
VisitStmt :: If Statement Found at line 31
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt Begin line = 32 and column = 3
VisitCompoundStmt :: CompoundStmt End line = 32 and column = 10
Original body code is {h=h+1;
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt at line 32 and column 3 to line 32 and column 10
VisitCompoundStmt :: Substmt is BinaryOperator at line 32
show_scope_map :: Printing scope map
a => a 3 44 int
b => b 3 44 float
funcp => funcp 3 44 char *
h => h 4 44 int
m => m 4 44 int
yy => yy 5 44 float
VisitStmt :: For Statement Found
VisitForStmt :: No Decl Stmt found in Init
VisitForStmt :: Decl Stmt found in Init and added to scope_map
Added variable in For Stmt to scope map if it exists and Returned from getDeclInForStmt()
getArrayUseInLoop :: Stmt Body of CompoundStmt
getArrayUseInLoop :: Stmt at line 37 is UnaryOperator
getArrayUseInLoop :: UnaryOperator at line 37
Instrumentation flag = 2
check_variable_scope :: Checking scope of variable a at print line number : 37
 <<< check_variable_scope :: Variable a is in scope at print line number : 37 | scope begin = 3 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable b at print line number : 37
 <<< check_variable_scope :: Variable b is in scope at print line number : 37 | scope begin = 3 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable funcp at print line number : 37
 <<< check_variable_scope :: Variable funcp is in scope at print line number : 37 | scope begin = 3 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable h at print line number : 37
 <<< check_variable_scope :: Variable h is in scope at print line number : 37 | scope begin = 4 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable m at print line number : 37
 <<< check_variable_scope :: Variable m is in scope at print line number : 37 | scope begin = 4 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable yy at print line number : 37
 <<< check_variable_scope :: Variable yy is in scope at print line number : 37 | scope begin = 5 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
Begin inscope_var_pairs :: Printing CBMC scope map
a => int
b => float
funcp => char *
h => int
m => int
yy => float
End inscope_var_pairs :: Printing CBMC scope map
eqStrAnd = oa==a && 
eqStrAnd = oa==a && ob==b && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && oh==h && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && oh==h && om==m && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && oh==h && om==m && oyy==yy
Instrumentation flag = 2
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt Begin line = 37 and column = 2
VisitCompoundStmt :: CompoundStmt End line = 37 and column = 7
Original body code is {h--;
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt at line 37 and column 2 to line 37 and column 7
VisitCompoundStmt :: Substmt is UnaryOperator at line 37
show_scope_map :: Printing scope map
a => a 3 44 int
b => b 3 44 float
funcp => funcp 3 44 char *
h => h 4 44 int
m => m 4 44 int
yy => yy 5 44 float
VisitStmt :: For Statement Found
VisitForStmt :: No Decl Stmt found in Init
VisitForStmt :: Decl Stmt found in Init and added to scope_map
Added variable in For Stmt to scope map if it exists and Returned from getDeclInForStmt()
getArrayUseInLoop :: Stmt Body of CompoundStmt
getArrayUseInLoop :: Stmt at line 39 is BinaryOperator
getArrayUseInLoop :: LHS at 39 is DeclRefExpr
getArrayUseInLoop :: RHS at 40 is CStyleCastExpr
Instrumentation flag = 2
check_variable_scope :: Checking scope of variable a at print line number : 39
 <<< check_variable_scope :: Variable a is in scope at print line number : 39 | scope begin = 3 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable b at print line number : 39
 <<< check_variable_scope :: Variable b is in scope at print line number : 39 | scope begin = 3 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable funcp at print line number : 39
 <<< check_variable_scope :: Variable funcp is in scope at print line number : 39 | scope begin = 3 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable h at print line number : 39
 <<< check_variable_scope :: Variable h is in scope at print line number : 39 | scope begin = 4 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable m at print line number : 39
 <<< check_variable_scope :: Variable m is in scope at print line number : 39 | scope begin = 4 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
check_variable_scope :: Checking scope of variable yy at print line number : 39
 <<< check_variable_scope :: Variable yy is in scope at print line number : 39 | scope begin = 5 | scope end = 44 >>> 
check_alloca_map :: Printing alloca map
Begin inscope_var_pairs :: Printing CBMC scope map
a => int
b => float
funcp => char *
h => int
m => int
yy => float
End inscope_var_pairs :: Printing CBMC scope map
eqStrAnd = oa==a && 
eqStrAnd = oa==a && ob==b && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && oh==h && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && oh==h && om==m && 
eqStrAnd = oa==a && ob==b && ofuncp==funcp && oh==h && om==m && oyy==yy
Instrumentation flag = 2
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt Begin line = 39 and column = 2
VisitCompoundStmt :: CompoundStmt End line = 40 and column = 13
Original body code is {yy
=(float) yy;
####################### CompoundStmt Code Range #######################
VisitCompoundStmt :: CompoundStmt at line 39 and column 2 to line 40 and column 13
VisitCompoundStmt :: Substmt is BinaryOperator at line 39
show_scope_map :: Printing scope map
a => a 3 44 int
b => b 3 44 float
funcp => funcp 3 44 char *
h => h 4 44 int
m => m 4 44 int
yy => yy 5 44 float

Finished call to function ParseAST  

 Rewrite Buffer is Not NULL 

Finished Rewriting 

 End Main 
